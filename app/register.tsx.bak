import React, { useState } from "react";
import { View, Text, TextInput, TouchableOpacity, StyleSheet, Alert, KeyboardAvoidingView, Image, Modal } from "react-native";
import { Ionicons } from "@expo/vector-icons";
import { Colors } from "@/constants/Colors";
import Sizes from "@/constants/Sizes";
import { useColorScheme } from "@/hooks/useColorScheme";
import { router } from "expo-router";
import AsyncStorage from "@react-native-async-storage/async-storage";
// Removed image picker: avatar is now provided via URL

export default function RegisterScreen() {
  const [pseudo, setPseudo] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [avatarUri, setAvatarUri] = useState<string>("");
  const [urlModalVisible, setUrlModalVisible] = useState(false);
  const [avatarInput, setAvatarInput] = useState("");
  const colorScheme = useColorScheme();
  const themeColors = Colors[colorScheme ?? "light"];
  const apiUrl = process.env.EXPO_PUBLIC_API_URL;

  const handleRegister = async () => {
    if (!pseudo || !email || !password) {
      Alert.alert("Erreur", "Veuillez remplir tous les champs");
      return;
    }

    try {
      const registerResponse = await fetch(`${apiUrl}/auth/local/register`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ pseudo, email, password }),
      });

      if (!registerResponse.ok) {
        const errorText = await registerResponse.text();
        throw new Error(errorText || "Erreur lors de l'inscription");
      }

      const loginResponse = await fetch(`${apiUrl}/auth/local`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, password }),
      });

      if (!loginResponse.ok) {
        const errorText = await loginResponse.text();
        throw new Error(errorText || "Erreur lors de la connexion");
      }

      const loginData = await loginResponse.json();

      await AsyncStorage.setItem("userToken", loginData.token);
      await AsyncStorage.setItem("userProfile", JSON.stringify({ pseudo, email, avatarUri }));

      router.replace("/");
    } catch (error: any) {
      Alert.alert("Erreur API", error.message);
    }
  };

  const isValidUrl = (v: string) => /^https?:\/\//i.test(v.trim());

  return (
    <KeyboardAvoidingView style={[styles.container, { backgroundColor: themeColors.background }]}>
      <Text style={[styles.title, { color: themeColors.text }]}>Inscription</Text>

      <View style={styles.avatarContainer}>
        <TouchableOpacity
          style={[styles.avatar, { borderColor: themeColors.separator }]}
          onPress={() => { setAvatarInput(avatarUri); setUrlModalVisible(true); }}
          accessibilityLabel="Saisir l'URL de l'avatar"
        >
          {isValidUrl(avatarUri) ? (
            <Image source={{ uri: avatarUri }} style={styles.avatarImage} />
          ) : (
            <Ionicons name="person-circle-outline" size={28} color={themeColors.secondary} />
          )}
        </TouchableOpacity>
      </View>

      <TextInput
        style={[styles.input, { borderColor: themeColors.separator, backgroundColor: themeColors.background, color: themeColors.text }]}
        placeholder="Pseudo"
        placeholderTextColor={themeColors.secondary}
        autoCapitalize="none"
        value={pseudo}
        onChangeText={setPseudo}
      />

      <TextInput
        style={[styles.input, { borderColor: themeColors.separator, backgroundColor: themeColors.background, color: themeColors.text }]}
        placeholder="Adresse email"
        placeholderTextColor={themeColors.secondary}
        keyboardType="email-address"
        autoCapitalize="none"
        value={email}
        onChangeText={setEmail}
      />

      <View style={styles.inputWrapper}>
        <TextInput
          style={[styles.input, { borderColor: themeColors.separator, backgroundColor: themeColors.background, color: themeColors.text, paddingRight: Sizes.SPACING_XL + 8 }]}
          placeholder="Mot de passe"
          placeholderTextColor={themeColors.secondary}
          secureTextEntry={!showPassword}
          value={password}
          onChangeText={setPassword}
        />
        <TouchableOpacity
          accessibilityLabel={showPassword ? "Masquer le mot de passe" : "Afficher le mot de passe"}
          onPress={() => setShowPassword((s) => !s)}
          style={styles.eyeButton}
        >
          <Ionicons name={showPassword ? "eye-off" : "eye"} size={22} color={themeColors.secondary} />
        </TouchableOpacity>
      </View>

      <TouchableOpacity style={[styles.button, { backgroundColor: themeColors.tint, height: Sizes.BUTTON_HEIGHT_LG }]} onPress={handleRegister}>
        <Text style={[styles.buttonText, { color: themeColors.background }]}>S'inscrire</Text>
      </TouchableOpacity>

      <TouchableOpacity style={styles.linkButton} onPress={() => router.push("/login")}>
        <Text style={[styles.linkText, { color: themeColors.tint }]}>Déjà un compte ? Se connecter</Text>
      </TouchableOpacity>
    </KeyboardAvoidingView>
    
    <Modal transparent visible={urlModalVisible} animationType="fade" onRequestClose={() => setUrlModalVisible(false)}>
      <View style={styles.modalBackdrop}>
        <View style={[styles.modalCard, { backgroundColor: themeColors.background, borderColor: themeColors.separator }]}> 
          <Text style={[styles.modalTitle, { color: themeColors.text }]}>URL de l'avatar</Text>
          <TextInput
            style={[styles.modalInput, { borderColor: themeColors.separator, color: themeColors.text }]}
            placeholder="https://..."
            placeholderTextColor={themeColors.secondary}
            autoCapitalize="none"
            autoCorrect={false}
            value={avatarInput}
            onChangeText={setAvatarInput}
          />
          <View style={styles.modalActions}>
            <TouchableOpacity style={[styles.modalButton, { borderColor: themeColors.separator }]} onPress={() => setUrlModalVisible(false)}>
              <Text style={{ color: themeColors.secondary }}>Annuler</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={[styles.modalButtonPrimary, { backgroundColor: themeColors.tint }]}
              onPress={() => {
                const trimmed = avatarInput.trim();
                const valid = /^https?:\/\//i.test(trimmed) || trimmed === "";
                if (!valid) {
                  Alert.alert("URL invalide", "Veuillez saisir une URL http(s) valide ou laisser vide.");
                  return;
                }
                setAvatarUri(trimmed);
                setUrlModalVisible(false);
              }}
            >
              <Text style={{ color: themeColors.background, fontWeight: '600' }}>Enregistrer</Text>
            </TouchableOpacity>
          </View>
        </View>
      </View>
    </Modal>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: Sizes.SPACING_LG,
  },
  title: {
    fontSize: Sizes.FONT_SIZE_XXL,
    fontWeight: "bold",
    marginBottom: Sizes.SPACING_XL,
  },
  input: {
    width: "100%",
    height: Sizes.INPUT_HEIGHT,
    borderWidth: 1,
    borderRadius: Sizes.INPUT_RADIUS,
    paddingHorizontal: Sizes.SPACING_MD,
    marginBottom: Sizes.SPACING_MD,
  },
  inputWrapper: {
    width: "100%",
    marginBottom: Sizes.SPACING_MD,
    position: "relative",
  },
  eyeButton: {
    position: "absolute",
    right: Sizes.SPACING_MD,
    top: 0,
    height: Sizes.INPUT_HEIGHT,
    justifyContent: "center",
    alignItems: "center",
  },
  button: {
    width: "100%",
    borderRadius: Sizes.BUTTON_RADIUS,
    alignItems: "center",
    justifyContent: "center",
  },
  buttonText: {
    fontWeight: "bold",
    fontSize: Sizes.FONT_SIZE_MD,
  },
  linkButton: {
    marginTop: Sizes.SPACING_MD,
  },
  linkText: {
    fontSize: Sizes.FONT_SIZE_SM,
    fontWeight: "600",
  },
  avatarContainer: {
    width: "100%",
    alignItems: "center",
    marginBottom: Sizes.SPACING_LG,
  },
  avatar: {
    width: 64,
    height: 64,
    borderRadius: 32,
    borderWidth: 1,
    alignItems: "center",
    justifyContent: "center",
    overflow: "hidden",
  },
  avatarImage: {
    width: "100%",
    height: "100%",
  },
  modalBackdrop: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.4)',
    alignItems: 'center',
    justifyContent: 'center',
    padding: Sizes.SPACING_LG,
  },
  modalCard: {
    width: '100%',
    maxWidth: 420,
    borderRadius: Sizes.BUTTON_RADIUS,
    borderWidth: 1,
    padding: Sizes.SPACING_LG,
  },
  modalTitle: {
    fontSize: Sizes.FONT_SIZE_LG,
    fontWeight: '700',
    marginBottom: Sizes.SPACING_MD,
  },
  modalInput: {
    borderWidth: 1,
    borderRadius: Sizes.INPUT_RADIUS,
    paddingHorizontal: Sizes.SPACING_MD,
    height: Sizes.INPUT_HEIGHT,
    marginBottom: Sizes.SPACING_MD,
    width: 260,
  },
  modalActions: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    gap: Sizes.SPACING_MD,
  },
  modalButton: {
    paddingHorizontal: Sizes.SPACING_MD,
    paddingVertical: 10,
    borderRadius: Sizes.BUTTON_RADIUS,
    borderWidth: 1,
  },
  modalButtonPrimary: {
    paddingHorizontal: Sizes.SPACING_MD,
    paddingVertical: 10,
    borderRadius: Sizes.BUTTON_RADIUS,
  },
});
